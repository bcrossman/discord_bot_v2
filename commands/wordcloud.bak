const { SlashCommandBuilder } = require('discord.js');
const fs = require('fs');
const path = require('path');
const d3Cloud = require('d3-cloud');
const { createCanvas } = require('canvas');
const csvParser = require('csv-parser');

const messagesCsvPath = path.join(__dirname, '..', 'data', 'messages.csv');
const outputImagePath = path.join(__dirname, '..', 'data', 'wordcloud.png');

async function createWordCloudImage(targetUsername, messages) {
  const width = 800;
  const height = 600;

  const words = messages.map((message, index) => ({
    text: message,
    size: 10 + (index % 5),
  }));

  const canvas = createCanvas(width, height);
  const ctx = canvas.getContext('2d');
  ctx.fillStyle = 'white';
  ctx.fillRect(0, 0, width, height);

  const layout = d3Cloud()
    .size([width, height])
    .canvas(() => canvas)
    .words(words)
    .padding(5)
    .font('Arial')
    .fontSize((d) => d.size)
    .rotate(0)
    .on('end', () => {
      words.forEach((word) => {
        ctx.save();
        ctx.translate(word.x, word.y);
        ctx.rotate(word.rotate * Math.PI / 180);
        ctx.textAlign = 'center';
        ctx.textBaseline = 'middle';
        ctx.font = `${word.size}px Arial`;
        ctx.fillStyle = 'white';
        ctx.fillText(word.text, 0, 0);
        ctx.restore();
      });

      const buffer = canvas.toBuffer('image/png');
      fs.writeFileSync(outputImagePath, buffer);
    });

  await new Promise((resolve) => {
    layout.on('end', resolve);
    layout.start();
  });
}


async function getMessagesByUser(targetUserId) {
    const messages = [];

    return new Promise((resolve) => {
        fs.createReadStream(messagesCsvPath)
            .pipe(csvParser())
            .on('data', (data) => {
                if (data.Author === targetUserId) {
                    messages.push(data.Message);
                }
            })
            .on('end', () => {
                resolve(messages);
            });
    });
}

module.exports = {
    data: new SlashCommandBuilder()
        .setName('wordcloud')
        .setDescription('Creates a word cloud image of all messages of a specific user')
        .addUserOption((option) =>
            option
                .setName('target')
                .setDescription('The user to create the word cloud for')
                .setRequired(true)
        ),
    async execute(interaction) {
        if (interaction.commandName === 'wordcloud') {
            if (!interaction.guild) {
                return await interaction.reply('This command can only be used in a server.');
            }
            const targetUser = interaction.options.getUser('target');
            const targetUsername = targetUser.username;

            const messages = await getMessagesByUser(targetUsername);
            await createWordCloudImage(targetUsername, messages);
			await interaction.channel.send({
											files: [{
												attachment: outputImagePath,
												name: 'wordcloud.png'
											  }]
											});
        }
    },
};
